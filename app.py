from flask import Flask, render_template, request, jsonify
from src.pipeline.preediction_pipeline import PredictionPipeline, CustomeClass
from src.logger import logging
from src.exception import CustmeException
from src.components.extraction import ExtractionPE

import pandas as pd
import pefile
import os
import array
import math
import pickle
import joblib
import sys
import argparse
import tempfile
import hashlib
from flask_cors import CORS

app = Flask(__name__)
CORS(app)  # Enable CORS for all routes

features_path = os.path.join("artifacts/data_transformation", "features_selected.txt")

with open(features_path, 'r') as f:
    selected_columns = [line.strip() for line in f]



@app.route("/signature",methods = ["GET", "POST"])
def prediction_data():
    extraction = ExtractionPE()
    if request.method == "GET":
        return render_template("home.html")
    
    else:
        logging.info("Request received")
        
        file = request.files['file']
        temp_file = tempfile.NamedTemporaryFile(delete=False)
        temp_file_path = temp_file.name

        # Save the uploaded file to the temporary file
        file.save(temp_file_path)
        
        # Calculate the md5 checksum
        md5_checksum = extraction.calculate_md5(temp_file_path)
        
        # Extract the file name
        file_name = file.filename
        
        # Extract data from the file
        data = extraction.extract_infos(temp_file_path, file_name, md5_checksum)
        
        # Convert the data to a DataFrame
        df = pd.DataFrame([data])
        
        # Select only the columns that were previously selected
        df_selected = df[selected_columns]
        pipeline_prediction = PredictionPipeline()
        pred = pipeline_prediction.predict(df_selected)
        
        # result = 0
        # pred_list = pred.tolist()
        pred_int = int(pred[0])
        # Here you can now use `df_selected` for any further processing or predictions
        # For demonstration, we will just return the selected columns as a response
        # return render_template('results.html', 
        #                    final_result=pred)
        
        malware = any
        if(pred_int == 1 ):
            malware = "is not malware"
        else:
            malware = "is malware"
        data = { 
            "file name " : file_name, 
            "the file " : malware, 
        } 
  
        return jsonify(data) 
        
@app.route('/returnjson', methods = ['GET']) 
def ReturnJSON(): 
    if(request.method == 'GET'): 
        data = { 
            "Modules" : 15, 
            "Subject" : "Data Structures and Algorithms", 
        } 
  
        return jsonify(data) 
if __name__ == "__main__":
     app.run(host = "0.0.0.0", debug = True)


